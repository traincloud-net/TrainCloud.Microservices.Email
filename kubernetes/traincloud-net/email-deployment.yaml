apiVersion: apps/v1
kind: Deployment
metadata:
  name: email-deployment
  namespace: traincloud-net
  labels:
    app: email
spec:
  replicas: 1
  selector:
    matchLabels:
      app: email
  template:
    metadata:
      labels:
        app: email
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
    spec:
      serviceAccountName: email-serviceaccount
      automountServiceAccountToken: false
      nodeSelector:
        deployment_node: traincloud-net-microservices # Label in IONOS k8s node pool
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
      containers:
        - name: email
          image: traincloud.cr.de-fra.ionos.com/microservices/email:v0.0.20
          ports:
            - containerPort: 8081
              protocol: TCP
              name: email
            - containerPort: 8080
              protocol: TCP
              name: health
            - containerPort: 9090
              protocol: TCP
              name: metrics
          # resources:
          #   requests:
          #     cpu: "100m"
          #     memory: "128Mi"
          #     ephemeral-storage: "256Mi"
          #   limits:
          #     memory: "256Mi"
          #     ephemeral-storage: "512Mi"


          # Liveness probe - checks if container is alive
          # Kubernetes will restart the container if this fails
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          # Readiness probe - checks if container is ready to serve traffic
          # Kubernetes will remove pod from service endpoints if this fails
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          # Startup probe - for slow-starting containers
          # Disables liveness/readiness checks until this succeeds
          startupProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 30  # 30 * 5s = 150s max startup time
          

          
          env:
            - name: TRAINCLOUD_SERVICE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: TRAINCLOUD_SERVICE_NODE
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TRAINCLOUD_MICROSERVICE_PORT
              value: "8081"
            - name: TRAINCLOUD_MICROSERVICE_TLS_ENABLED
              value: "false"
            - name: MESSAGEBUS_HOSTNAME
              value: "rabbitmq-service-queue.traincloud-net.svc.cluster.local"
            - name: MESSAGEBUS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: messagebus_username
            - name: MESSAGEBUS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: messagebus_password
            - name: JWT_ISSUERSIGNINGKEY
              valueFrom:
                secretKeyRef:
                  name: jwt-credentials
                  key: jwt_issuersigningkey
            - name: EMAIL_SERVER
              valueFrom:
                secretKeyRef:
                  name: email-credentials
                  key: email_server
            - name: EMAIL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: email-credentials
                  key: email_username
            - name: EMAIL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: email-credentials
                  key: email_password
            - name: EMAIL_PORT
              valueFrom:
                secretKeyRef:
                  name: email-credentials
                  key: email_port
      imagePullSecrets: 
        - name: traincloud-container-registry-credentials
